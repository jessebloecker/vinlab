#This file controls which keys and corresponding sub-keys and super-keys (contexts) are valid in the config files, names listed alphabetically
#A key may have more than one context, in which case the description and subkeys will be different for each context 
#The valid subkeys are divided into four categories: required, required_exclusive, optional, and codependent
# Format:
#    <the key>:      
#       - context: <the key under which this key is valid> 
#         description: <a description of the key in the current context>
#         subkeys: <a list of valid subkeys (if any) for this key in the current context>
#             required:            <all of these keys must be included>
#             required_exclusive:  <exactly one of these keys must be included (unless it contains any groups of codependent keys)>
#             optional:            <any of these keys may optionally be included>
#             codependent:         <if any of these keys are included, all of them must be included>
accel_noise_density:
  - context: imu
    description: "accelerometer noise density - units: (m/s^2) * (1/sqrt(Hz))"

accel_random_walk:
  - context: imu
    description: "accelerometer rate random walk - units: (m/s^3) * (1/sqrt(Hz))"

align_axis:
  - context: rotation_trajectory
    description: "arguments for the [rotation_align_axis function](/vinlab/src/geometry_utils.py).
                  Compute the rotation(s) that aligns given axis with the given vector(s), 
                  and keeps one other axis parallel to the original xy-plane (ground plane)"
    subkeys:
      required: [axis, vec, grounded_axis, flip]
      required_exclusive: []
      optional: [flip]
      codependent: []
  
  - context: rotation
    description: "arguments for the [rotation_align_axis function](/vinlab/src/geometry_utils.py)"
    subkeys:
      required: [axis, vec, grounded_axis, flip]
      required_exclusive: []
      optional: [flip]
      codependent: []

axis: 
  - context: align_axis
    description: "string, 'x','y', or 'z' axis to align with 'vec'"

base_frame:
  - context: platform
    description: "name of the base frame of the sensor platform. This is the frame that will follow the described trajectory, and the frame that 
                  the sensor and body frames are defined relative to, by default"

body_frame:
  - context: body_frames
    description: "fixed frame attached to the sensor platform"
    subkeys:
      required: [id, transform]
      required_exclusive: []
      optional: []
      codependent: []

body_frames:
  - context: platform
    description: "list of body frames attached to the sensor platform"

bspline:
  - context: translation_trajectory
    description: "uniform bspline trajectory - generates spline of position values from set of control points"
    subkeys:
      required: [res, degree, span_time, control_points]
      required_exclusive: []
      optional: [] 
      codependent: []

bspline_so3:
  - context: rotation_trajectory
    description: "NOT IMPLEMENTED: bspline rotation trajectory - generate spline of rotation values from set of control rotations"
    subkeys:
      required: []
      required_exclusive: []
      optional: []
      codependent: []


camera:
  - context: sensor
    description: "description of camera sensor"
    subkeys:
      required: [height, width]
      required_exclusive: [intrinsics, fov]
      optional: [distortion, noise_std_dev]
      codependent: []

center:
  - context: planar_points
    description: "position of the center of the plane"
  - context: random_points
    description: "position center around which to generate the random points"

color:  
  - context: feature
    description: "color of all points in the set, given as string e.g. 'red', 'blue', 'green'. If not given, a repeating sequence of colors will be assigned"

constant:
  - context: rotation_trajectory
    description: "NOT IMPLEMENTED: constant rotation value to apply to the trajectory"

control_points:
  - context: bspline
    description: "The set of 3D position points to use as bspline control points. For degree k, there must be at least k+1 control points"
    subkeys:
      required: []
      required_exclusive: [points, file]
      optional: []
      codependent: []

control_point_rate:
  - context: subsample_interpolate
    description: "rate at which to sample control points from the original trajectory"

copy:
  - context: trajectory
    description: "NOT IMPLEMENTED: copy an existing trajectory"

current_trajectory:
  - context: vec
    description: "Use the current trajectory's position, velocity, acceleration, or the bearing vectors from each position to its centroid
                  as the source of vectors to align with 'axis'. Allowed values: 'pos', 'vel', 'acc', 'centroid'"
degree:
  - context: bspline
    description: "degree of the bspline polynomial - equal to the bspline order minus 1"

degree:
  - context: subsample_interpolate
    description: "degree of the bspline polynomial - equal to the bspline order minus 1"

distortion:
  - context: camera
    description: "radtan lens distortion parameters to generate images
                  format: [k1, k2, p1, p2]"

enable_measurements:
  - context: sensor
    description: "boolean: if true, compute simulated measurements from this sensor"

feature:
  - context: features
    description: "set of points and corresponding colors"
    subkeys:
      required: [id]
      required_exclusive: [points, random_points, planar_points]
      optional: [color, frame]
      codependent: []
    
features:
  - context: scene
    description: "list of features"

file:
  - context: trajectory
    description: "file information for the trajectory data"
    subkeys:
      required: [path, format]
      required_exclusive: []
      optional: [time_unit, jpl] 
      codependent: []

  - context: control_points
    description: "NOT IMPLEMENTED: file containing list of 3D position points to use as bspline control points"
    subkeys:
      required: [path, format]
      required_exclusive: []
      optional: []
      codependent: []

flip:
  - context: align_axis
    description: "boolean: if true, the 'grounded' axis will be negated, giving the other available solution"

format:
  - context: file
    description: "format of the file containing position and/or rotation data
                  example: 't x y z qx qy qz qw' 
                  separated by spaces or comma according to file, 
                  use dashes to indicate columns to ignore, e.g. 't,x,y,z,-,-,-,qx,qy,qz,qw' "
fov:
  - context: camera
    description: "field of view in degrees of the camera images to generate"

from:
  - context: transform
    description: "name of the parent frame, relative to which to define the transform"

grid_spacing:
  - context: planar_points
    description: "uniform spacing used to construct grid of points on the plane"

grounded_axis:
  - context: align_axis
    description: "string, 'x','y', or 'z' axis to remain parallel to the original xy-plane.
                  cannot be the same as 'axis' param.
                  if not provided, it will be the next sequential axis after 'axis' (x->y, y->z, z->x)."
gyro_noise_density:
  - context: imu
    description: "gyro noise density - units: (rad/s^2) * (1/sqrt(Hz))"

gyro_random_walk:
  - context: imu
    description: "gyro rate random walk - units: (rad/s^2) * (1/sqrt(Hz))"

height:
  - context: camera
    description: "height in pixels of the camera images to generate"
  
id:
  - context: trajectory
    description: "name of the trajectory"
  - context: platform
    description: "name of the platform"
  - context: sensor
    description: "name of the sensor"
  - context: feature
    description: "name of the feature"
  - context: body_frame
    description: "name of the body frame"

imu:
  - context: sensor
    description: "description of imu sensor"
    subkeys:
      required: [gyro_noise_density, gyro_random_walk, accel_noise_density, accel_random_walk]
      required_exclusive: []
      optional: []
      codependent: []

intrinsics:
  - context: camera
    description: "camera intrinsic parameter values to generate images
                  format: [fx, fy, cx, cy]"

jpl:
  - context: file
    description: "boolean: if true, assume the file contains jpl quaternions, otherwise hamilton quaternions"

main:
  - context: trajectory_group
    description: "name of the main trajectory in the group"

modify:
  - context: trajectory
    description: "NOT IMPLEMENTED modify a trajectory by scaling, shifting, and/or rotating about a point"
    subkeys:
      required: []
      required_exclusive: []
      optional: [scale, shift, rotate_about_point]
      codependent: []
    
negate:
  - context: vec
    description: "boolean: if true, negate the vector(s) to align the specified axis"

normal:
  - context: planar_points
    description: "normal vector of the plane"

noise_std_dev:
  - context: camera
    description: "standard deviation in pixels of zero-mean gaussian noise to add to the feature image points"

num:
  - context: planar_points
    description: "number of coplanar points to generate"

  - context: random_points
    description: "number of random points to generate"

output: 
  - context: scene
    description: "output data configuration"
    subkeys:
      required: [images, imu_data, video, rosbag2]
      required_exclusive: []
      optional: []
      codependent: []
      
path:
  - context: file
    description: "path to the file containing position and/or rotation data"

planar_points:
  - context: feature
    description:
    subkeys:
      required: [center, normal, radius]
      required_exclusive: [grid_spacing, num]
      optional: []
      codependent: []

platform:
  - context: scene
    description: "sensor platform containing sensors and/or body frames"
    subkeys:
      required: [id, base_frame]
      required_exclusive: []
      optional: [sensors, body_frames]
      codependent: []

point:
  - context: rotate_about_point
    description: "global position point about which to rotate the trajectory"

points:
  - context: feature
    description: "list of 3D points"
  - context: control_points
    description: "list of 3D position points to use as bspline control points"

radius:
  - context: planar_points
    description: "max distance from the center of the plane"

  - context: random_points
    description: "max distance from the center of the point set"

random_points:
  - context: feature
    description: "arguments for random_point_set function"
    subkeys:
      required: [center, radius, num]
      required_exclusive: []
      optional: []
      codependent: []
reference:
  - context: trajectory_group
    description: "name of the reference trajectory in the group"
res:
  - context: bspline
    description: "resolution of the bspline curve"

rotate_about_point:
  - context: modify
    description: "rotate entire trajectory about a point in space - transforms both position and rotation values along the trajectory"
    subkeys:
      required: [rotation, point]
      required_exclusive: []
      optional: []
      codependent: []

rotation:
  - context: transform
    description: "x-y-z fixed-axis euler angles in degrees from base frame to this sensor frame"
  
  - context: rotate_about_point
    description: " NOT IMPLEMENTED: x-y-z fixed-axis euler angles in degrees to apply to the trajectory about a fixed point"

rotation_only:
  - context: subsample_interpolate
    description: "translation value in the trajectory will be zero at all times"

rotation_trajectory:
  - context: trajectory
    description: "rotation component of the trajectory"
    subkeys:
      required: []
      required_exclusive: [bspline_so3, file, constant, align_axis]
      optional: []
      codependent: []

scale:
  - context: modify
    description: "NOT IMPLEMENTED: scale all position values in the trajectory by this value"

scene:
  - context:  # top level key
    description: "Specify a visual-inertial scene containing trajectory group, sensor platform, and features."
    subkeys: 
      required: [trajectory_group, platform]
      required_exclusive: []
      optional: [static_frames, features, output]
      codependent: []

sensor:
  - context: sensors
    description: "camera or imu sensor rigidly attached to the sensor platform"
    subkeys:
      required: [id, enable_measurements, rate]
      required_exclusive: [imu, camera]
      optional: [transform, time_offset]
      codependent: []

sensors:
  - context: platform
    description: "list of sensors attached to the sensor platform"
    
shift:
  - context: modify
    description: "NOT IMPLEMENTED: shift all position values in the trajectory by this position vector"

source_trajectory:
  - context: subsample_interpolate
    description: "existing id of the trajectory to subsample and use as control points"

span_time:
  - context: bspline
    description: "time in seconds to traverse a single span of the bspline curve"

static_frame:
  - context: scene
    description: "static frame from which trajectories or features may be defined"
    subkeys:
      required: [id, transform]
      required_exclusive: []
      optional: []
      codependent: []
    
static_frames:
  - context: scene
    description: "list of static frames"

subsample_interpolate:
  - context: trajectory
    description: "subsample an existing trajectory and use the resulting positions as control points for a new trajectory"
    subkeys:
      required: [source_trajectory, control_point_rate, degree]
      required_exclusive: []
      optional: [translation_only, rotation_only]
      codependent: []

time_offset:
  - context: sensor
    description: "NOT IMPLEMENTED: time offset in seconds to apply to the sensor measurements"

time_unit:
  - context: file
    description: "The unit of time used in the file. Allowed values: s, ms, us, ns"

trajectories:
  - context: trajectory_group
    description: "list of trajectories to compare"

trajectory:
  - context: trajectory_group
    description: "trajectory containing a sequence of position rotation values"
    subkeys:
      required: [id]
      required_exclusive: [file, translation_trajectory, rotation_trajectory, subsample_interpolate, copy]
      optional: [index_range, frame]
      codependent:
        - [translation_trajectory, rotation_trajectory]

trajectory_group:
  - context: scene
    description: "set of representations of a single trajectory to be compared - i.e. the estimate and the ground truth "
    subkeys:
      required: [reference, trajectories]
      required_exclusive: []
      optional: [main, frame]
      codependent: []

transform:
  - context: sensor
    description: "Transformation to this sensor frame. By default, relative to the 'base frame' of this platform unless, 'from' is specified"
    subkeys:
      required: [translation, rotation]
      required_exclusive: []
      optional: [from]
      codependent: []

  - context: body_frame
    description: "Transformation to this body frame. By default, relative to the 'base frame' of this platform, unless 'from' is specified"  
    subkeys:
      required: [translation, rotation]
      required_exclusive: []
      optional: [from]
      codependent: []
    
translation:
  - context: transform
    description: "translation from base frame to this sensor frame"

translation_trajectory:
  - context: trajectory
    description: "translation component of the trajectory"
    subkeys:
      required: []
      required_exclusive: [bspline, file, constant]
      optional: []
      codependent: []


translation_only:
  - context: subsample_interpolate
    description: rotation value in the trajectory will be identity at all times

vec:
  - context: align_axis
    description: "vector(s) to align with the specified axis"
    subkeys:
      required: []
      required_exclusive: [current_trajectory]
      optional: [negate]
      codependent: []

    
width:
  - context: camera
    description: "width in pixels of the camera images to generate"